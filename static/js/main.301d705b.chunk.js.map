{"version":3,"sources":["serviceWorker.js","router/history.ts","layout/Footer.tsx","layout/Header.tsx","layout/Layout.tsx","integration/firebase/api.ts","pages/mpg-200/PageMpg200Order.tsx","pages/mpg-200/PageMpg200OrderReceipt.tsx","pages/mpg-200/ImageWithDescription.tsx","pages/PageContactMe.tsx","pages/PageContactReceipt.tsx","router/routes.ts","router/routes.type.ts","pages/Frontpage.tsx","pages/xm8/PageXM8.tsx","pages/mpg-200/PagePg200.tsx","pages/machinebeats/PageMachinebeats.tsx","pages/mpg-200/PageMpg200.tsx","pages/mpg-200/PageMpg200BuildersGuide.tsx","pages/68b01/Page68b01.tsx","router/RouterComponent.tsx","index.tsx","pages/mpg-200/images/6_pin_din.png","pages/mpg-200/images/1n4148.jpg","pages/mpg-200/images/resistors.jpg","pages/mpg-200/images/dil-sockets.jpg","pages/mpg-200/images/transistor-voltage_reg.jpg","pages/mpg-200/images/din-sockets.jpg","pages/mpg-200/images/jack.jpg","pages/mpg-200/images/jacks.jpg","pages/mpg-200/images/jack-parts.jpg","pages/mpg-200/images/jack-inner.jpg","pages/mpg-200/images/led.jpg","pages/mpg-200/images/cap.jpg","pages/mpg-200/images/ellytcaps.jpg","pages/mpg-200/images/6n137.jpg","pages/mpg-200/images/microcontroller.jpg","pages/xm8/images/XM8-architecture-overview.png","pages/mpg-200/images/pg-200-switches.png","pages/mpg-200/images/pg-200-tx.png","pages/68b01/images/nono.jpg","pages/68b01/images/yesyes.jpg"],"names":["Boolean","window","location","hostname","match","createBrowserHistory","className","href","paths","contactMe","withRouter","props","children","defaultTitle","root","src","alt","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","db","database","order","ref","push","formConfig","mpg200count","isNumber","enclosureCount","name","isRequired","email","isEmail","email2","isEqual","fields","message","value","validateIf","length","address1","zip","city","country","comments","isMaxLength","terms","PageMpg200Order","state","mpg200Count","isValid","passThroughFields","orderDate","Date","toISOString","items","count","console","log","firebaseApi","history","mpg200orderReceipt","options","sum","this","mpg200","title","onSubmit","config","errors","submitted","onChange","e","setState","parseInt","target","map","index","key","placeholder","address2","maxLength","type","Component","PageContactReceipt","ImageWithDescription","label","classNames","PageContactMe","date","contactMeReceipt","xm8","pg200","machinebeats","mpg200buildersGuide","mpg200order","keyboardController","routes","path","component","layout","Layout","architecture","pg200tx","width","pg200switches","sixPinDin","diodeImage","resistorsImage","ledImage","capImage","ellytcapsImage","dilSocketsImage","ic6n137Image","microcontrollerImage","transistorsVoltageRegImage","dinSocketsImage","jacksImage","jack","jackParts","jackInner","PageMpg200OrderReceipt","nono","yesyes","RouterComponent","exact","from","to","route","render","redirectPath","Error","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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,4BACE,0CACA,mCAEF,4BACE,mCACA,mCAEF,4BACE,yCACA,mCAEF,4BACE,4CACA,mCAEF,4BACE,uCACA,qCAKN,6BACE,+BACE,4BACE,wCACA,wCAEF,4BACE,uCACA,mCAEF,4BACE,4CACA,mCAEF,4BACE,yCACA,mCAEF,4BACE,wCACA,mCAEF,4BACE,8CACA,mCAEF,4BACE,sCACA,mCAEF,4BACE,qCACA,mCAEF,4BACE,uCACA,mCAEF,4BACE,uCACA,qCAIN,wCACA,iUAMA,uEAC2C,6BACzC,4BACE,gDACA,oFACA,0CAIJ,kGAEA,+BACE,4BACE,sCACA,6CACA,oCACA,6CAEF,4BACE,2CACA,iCACA,mCACA,4CACe,6BADf,eAEc,6BAFd,iBAMF,4BACE,8CACA,iCACA,mCACA,4CACe,6BADf,kBAEiB,6BAFjB,qBAMF,4BACE,2CACA,iCACA,mCACA,4CACe,6BADf,eAEc,6BAFd,iBAMF,4BACE,8CACA,iCACA,mCACA,4CACe,6BADf,kBAEiB,6BAFjB,mBAGkB,6BAHlB,oBAOF,4BACE,wCACA,iCACA,mCACA,4CACe,6BADf,iBAEgB,6BAFhB,oBAMF,4BACE,iDACA,iCACA,iCACA,0CACa,6BADb,cAKF,4BACE,wCACA,iCACA,iCACA,sCACS,6BADT,gBAKF,4BACE,gDACA,iCACA,iCACA,qCACQ,6BADR,UAKF,4BACE,gDACA,iCACA,iCACA,qCACQ,6BADR,UAKF,4BACE,gDACA,iCACA,iCACA,qCACQ,6BADR,UAKF,4BACE,gDACA,iCACA,iCACA,qCACQ,6BADR,UAKF,4BACE,4CACA,iCACA,mCACA,6CACgB,6BADhB,mBAEkB,6BAFlB,qBAMF,4BACE,kDACA,iCACA,iCACA,0CACa,6BADb,cAKF,4BACE,sCACA,iCACA,iCACA,qCACQ,6BADR,WAMJ,2BACE,6BADF,qFAIA,2BACE,yBAAKS,IAAKmG,KAAeD,MAAM,SAEjC,oMAIA,spBASA,gDACA,wHAGA,+BACE,4BACE,uCACA,uCACA,sCAEF,4BACE,sCACA,mCACA,4DAEF,4BACE,qCACA,mCAC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","file":"static/js/main.301d705b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createBrowserHistory } from 'history';\nexport default createBrowserHistory();\n","import React from 'react';\nimport './Footer.scss';\nimport { paths } from '../router/routes';\n\nexport default () => {\n  return <footer className=\"footer\">\n    <p>\n      Xonik Devices is Joakim Tysseng of Haslum, Norway.\n    </p>\n    <p>\n      Use the <a href={paths.contactMe}>contact form</a> if you want to get in touch with me,\n    </p>\n  </footer>\n}\n","import React from 'react';\nimport './Header.scss';\n\nexport default () => {\n  return <header className=\"header\"></header>\n}\n","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport Helmet from 'react-helmet';\nimport Footer from './Footer';\nimport Header from './Header';\nimport './Layout.scss';\nimport { paths } from '../router/routes';\n\ntype Props = RouteComponentProps<any>;\n\nconst Layout: React.FunctionComponent<Props> = props => {\n  const { children } = props;\n\n  return (\n    <div className=\"layout\">\n      <Helmet defaultTitle=\"Xonik.no\"/>\n      <Header />\n      <div>\n        <a href={paths.root}><img src=\"/images/xonik-logo.png\" className=\"logo-image\" alt=\"Xonik logo\"/></a>\n        <div className=\"layout__main\">{children}</div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default withRouter(Layout);\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/analytics';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyA1IgwVEZU2p_HZ7tNfleCuicwygyG28UQ\",\n  authDomain: \"xonik-5e3eb.firebaseapp.com\",\n  databaseURL: \"https://xonik-5e3eb.firebaseio.com\",\n  projectId: \"xonik-5e3eb\",\n  storageBucket: \"xonik-5e3eb.appspot.com\",\n  messagingSenderId: \"602600387700\",\n  appId: \"1:602600387700:web:fb9f80d0c0e45c9e288d21\",\n  measurementId: \"G-B3S9W195RH\"\n};\n// Initialize Firebase\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nfirebase.analytics();\nconst db = firebaseApp.database();\n\nconst submitOrder = (order: any) => {\n  db.ref('orders').push(order);\n};\n\nconst submitContactForm = (order: any) => {\n  db.ref('contactForm').push(order);\n};\n\nexport default {\n  submitOrder,\n  submitContactForm,\n}","import React, { Component } from 'react';\nimport { FormContext, FormValidation } from 'calidation';\nimport firebaseApi from '../../integration/firebase/api';\nimport './PageMpg200Order.scss';\nimport { paths } from '../../router/routes';\nimport history from '../../router/history';\n\nconst formConfig = {\n  mpg200count: {\n    isNumber: 'Number of MPG-200 kits must be a number'\n  },\n  enclosureCount: {\n    isNumber: 'Number of enclosures must be a number'\n  },\n  name: {\n    isRequired: 'Name is required!',\n  },\n  email: {\n    isRequired: 'Name is required!',\n    isEmail: 'Email is required',\n  },\n  email2: {\n    isRequired: 'Please confirm email address',\n    isEqual: ({ fields }: { fields: any }) => ({\n      message: 'The two emails must match',\n      value: fields.email,\n      validateIf: fields.email.length > 0,\n    }),\n  },\n  address1: {\n    isRequired: 'Street address is required',\n  },\n  zip: {\n    isRequired: 'Postal code is required',\n  },\n  city: {\n    isRequired: 'Postal city is required',\n  },\n  country: {\n    isRequired: 'Country is required',\n  },\n  comments: {\n    isMaxLength: {\n      message: 'Comment is too long',\n      length: 4000,\n    },\n  },\n  terms: {\n    isRequired: 'You must approve of terms and conditions before submitting',\n    isEqual: () => ({\n      message: 'You must approve of terms and conditions before submitting',\n      value: true,\n    }),\n  }\n};\n\ninterface State {\n  mpg200Count: number,\n  enclosureCount: number,\n}\n\nclass PageMpg200Order extends Component<any, State> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      mpg200Count: 0,\n      enclosureCount: 0,\n    }\n  }\n\n  onSubmit({ fields, isValid }: FormContext) {\n    if (isValid) {\n      const {\n        mpg200count,\n        enclosureCount,\n        ...passThroughFields\n      } = fields;\n\n      const order: any = {\n        orderDate: new Date().toISOString(),\n        ...passThroughFields,\n        items: []\n      };\n\n      if(mpg200count > 0){\n        order.items.push({name: 'MPG-200', count: mpg200count});\n      }\n      if(enclosureCount > 0){\n        order.items.push({name: 'Enclosure', count: enclosureCount});\n      }\n\n      console.log('submitting', order);\n      firebaseApi.submitOrder(order);\n      history.push(paths.mpg200orderReceipt);\n    }\n  }\n\n\n  render() {\n\n    const options = [0,1,2,3,4,5,6,7,8,9,10];\n    const sum = this.state.mpg200Count * 50 + this.state.enclosureCount * 10;\n\n    return <div className=\"order\">\n      <h1>MPG-200 Order Form</h1>\n      <p>\n        If you've arrived here you probably know what the MPG-200 is all about.\n        If not, <a href={paths.mpg200} title=\"Check out the MPG-200\">check it out</a>\n      </p>\n      <p>\n        intro text, one man operation\n      </p>\n      <FormValidation onSubmit={this.onSubmit} config={formConfig}>\n        {({ errors, fields, submitted }) => (\n          <>\n            <div>\n              Please fill in the form below and I will send you a Paypal invoice\n            </div>\n            <h2>Items</h2>\n            <div className=\"order_form-input\">\n              <select name=\"mpg200count\" onChange={e => this.setState({mpg200Count: parseInt(e.target.value)})}>\n                {options.map(index => <option key={index} value={index}>{index}</option>)}\n              </select>\n              MPG-200 kits, €50 per kit\n            </div>\n            <div className=\"order_form-input\">\n              <select name=\"enclosureCount\" onChange={e => this.setState({enclosureCount: parseInt(e.target.value)})}>\n                {options.map(index => <option key={index} value={index}>{index}</option>)}\n              </select>\n              Laser cut MDF enclosures, €10 per enclosure\n            </div>\n            <p>\n              <strong>Total: {sum} + shipping</strong>\n            </p>\n            <p>\n              In addition, you will have to pay any customs fees, VAT and other fees applicable in your country.\n            </p>\n            <h2>Personal details</h2>\n            <div className=\"order_form-input\">\n              <input name=\"name\" placeholder=\"Name\"/>\n              {submitted && errors.name &&\n              <span className=\"order_validation-error\">{errors.name}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <input name=\"email\" placeholder=\"Email\"/>\n              <div className=\"order_help-text\">This is where your paypal invoice will be sent</div>\n              {submitted && errors.email &&\n              <span className=\"order_validation-error\">{errors.email}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <input name=\"email2\" placeholder=\"Confirm email\"/>\n              {submitted && errors.email2 &&\n              <span className=\"order_validation-error\">{errors.email2}</span>}\n            </div>\n            <h2>Shipping address</h2>\n            <div className=\"order_form-input\">\n              <input name=\"address1\" placeholder=\"Street name and number\"/>\n              {submitted && errors.address1 &&\n              <span className=\"order_validation-error\">{errors.address1}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <input name=\"address2\" placeholder=\"Extended address\"/>\n              {submitted && errors.address2 &&\n              <span className=\"order_validation-error\">{errors.address2}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <input name=\"zip\" placeholder=\"Postal code\"/>\n              {submitted && errors.zip &&\n              <span className=\"order_validation-error\">{errors.zip}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <input name=\"city\" placeholder=\"Postal city\"/>\n              {submitted && errors.city &&\n              <span className=\"order_validation-error\">{errors.city}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <input name=\"country\" placeholder=\"Country\"/>\n              {submitted && errors.country &&\n              <span className=\"order_validation-error\">{errors.country}</span>}\n            </div>\n\n            <h2>Additional</h2>\n            <div className=\"order_form-input\">\n              <textarea name=\"comments\" placeholder=\"comments\" maxLength={4000}/>\n            </div>\n            <div className=\"order_form-input\">\n              <label>\n                <input type=\"checkbox\" name=\"terms\"/> Accept terms\n                {submitted && errors.terms &&\n                <span className=\"order_validation-error\">{errors.terms}</span>}\n              </label>\n            </div>\n            <button>Submit order</button>\n          </>\n        )}\n      </FormValidation>\n    </div>;\n  };\n}\n\nexport default PageMpg200Order;","import React, { Component } from 'react';\nimport { paths } from '../../router/routes';\n\nclass PageContactReceipt extends Component {\n\n  render() {\n    return <div className=\"order\">\n      <h1>Order receipt</h1>\n      <p>\n        Thank you for your order! I will get back to you shortly.\n      </p>\n      <p>\n        <a href={paths.root}>To frontpage</a>\n      </p>\n    </div>;\n  };\n}\n\nexport default PageContactReceipt;","import React from 'react';\nimport classNames from 'classnames';\nimport './ImageWithDescription.scss';\n\ninterface Props {\n  src: string,\n  label: string,\n  className?: string,\n}\n\nconst ImageWithDescription = ({src, label, className}: Props) => {\n  return <div className={classNames('image-with-description', className)}>\n    <img src={src} alt={label}/><br/>\n    <div className=\"label\">{label}</div>\n  </div>\n};\n\nexport default ImageWithDescription;\n","import React, { Component } from 'react';\nimport { FormContext, FormValidation } from 'calidation';\nimport firebaseApi from '../integration/firebase/api';\nimport history from '../router/history';\nimport { paths } from '../router/routes';\n\nconst formConfig = {\n  name: {\n    isRequired: 'Name is required!',\n  },\n  email: {\n    isRequired: 'Name is required!',\n    isEmail: 'Email is required',\n  },\n  comments: {\n    isMaxLength: {\n      message: 'Comment is too long',\n      length: 4000,\n    },\n  },\n};\n\nclass PageContactMe extends Component {\n\n  onSubmit({ fields, isValid }: FormContext) {\n    if (isValid) {\n      firebaseApi.submitContactForm({\n        ...fields,\n        date: new Date().toISOString(),\n      });\n      history.push(paths.contactMeReceipt);\n    }\n  }\n\n\n  render() {\n    return <div className=\"order\">\n      <h1>Contact Form</h1>\n      <FormValidation onSubmit={this.onSubmit} config={formConfig}>\n        {({ errors, fields, submitted }) => (\n          <>\n            <p>\n              Xonik Devices is a one man operation. If you want to contact me, ask me any question\n              or just chat about synths, fill in the form and I will try to get back to you as soon\n              as possible.\n            </p>\n            <div className=\"order_form-input\">\n              <input name=\"name\" placeholder=\"Name\"/>\n              {submitted && errors.name &&\n              <span className=\"order_validation-error\">{errors.name}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <input name=\"email\" placeholder=\"Email\"/>\n              {submitted && errors.email &&\n              <span className=\"order_validation-error\">{errors.email}</span>}\n            </div>\n            <div className=\"order_form-input\">\n              <textarea name=\"comments\" placeholder=\"comments\" maxLength={4000}/>\n            </div>\n            <button>Submit</button>\n          </>\n        )}\n      </FormValidation>\n    </div>;\n  };\n}\n\nexport default PageContactMe;","import React, { Component } from 'react';\nimport { paths } from '../router/routes';\n\nclass PageContactReceipt extends Component {\n\n  render() {\n    return <div className=\"order\">\n      <h1>Contact form receipt</h1>\n      <p>\n        Thank you! I will get back to you shortly.\n      </p>\n      <p>\n        <a href={paths.root}>To frontpage</a>\n      </p>\n    </div>;\n  };\n}\n\nexport default PageContactReceipt;","import { ROUTE_NORMAL, Routes } from './routes.type';\nimport Layout from '../layout/Layout';\nimport Frontpage from '../pages/Frontpage';\nimport PageMpg200 from '../pages/mpg-200/PageMpg200';\nimport PageMpg200Order from '../pages/mpg-200/PageMpg200Order';\nimport PageMpg200OrderReceipt from '../pages/mpg-200/PageMpg200OrderReceipt';\nimport PageMpg200BuildersGuide from '../pages/mpg-200/PageMpg200BuildersGuide';\nimport PageContactMe from '../pages/PageContactMe';\nimport PageContactReceipt from '../pages/PageContactReceipt';\nimport PageXM8 from '../pages/xm8/PageXM8';\nimport PagePg200 from '../pages/mpg-200/PagePg200';\nimport Page68b01 from '../pages/68b01/Page68b01';\nimport PageMachinebeats from '../pages/machinebeats/PageMachinebeats';\n\nexport const paths = {\n  root: '/',\n  xm8: '/xm8',\n  pg200: '/mpg200/pg200',\n  machinebeats: '/machinebeats',\n  mpg200: '/mpg200',\n  mpg200buildersGuide: '/mpg200/builders-guide',\n  mpg200order: '/mpg200/order',\n  mpg200orderReceipt: '/mpg200/order/receipt',\n  keyboardController: '/68b01',\n  contactMe: '/contact-me',\n  contactMeReceipt: '/contact-me/receipt',\n};\n\nexport const routes: Routes = [\n  {\n    type: ROUTE_NORMAL,\n    path: paths.root,\n    component: Frontpage,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.xm8,\n    component: PageXM8,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.pg200,\n    component: PagePg200,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.machinebeats,\n    component: PageMachinebeats,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.mpg200,\n    component: PageMpg200,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.mpg200buildersGuide,\n    component: PageMpg200BuildersGuide,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.mpg200order,\n    component: PageMpg200Order,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.mpg200orderReceipt,\n    component: PageMpg200OrderReceipt,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.keyboardController,\n    component: Page68b01,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.contactMe,\n    component: PageContactMe,\n    layout: Layout,\n  },\n  {\n    type: ROUTE_NORMAL,\n    path: paths.contactMeReceipt,\n    component: PageContactReceipt,\n    layout: Layout,\n  },\n];","export const ROUTE_NORMAL: 'normal' = 'normal';\nexport const ROUTE_REDIRECT: 'redirect' = 'redirect';\n\ninterface Route {\n  type: typeof ROUTE_NORMAL;\n  path: string;\n  component: any;\n  layout: any;\n}\n\ninterface RedirectRoute {\n  type: typeof ROUTE_REDIRECT\n  path: string;\n  redirectPath: string;\n}\n\nexport type Routes = (Route | RedirectRoute)[];\n","import React from 'react';\nimport { paths } from '../router/routes';\n\nexport default () => {\n  return <div>\n    <h1>Xonik Devices</h1>\n    <p>\n      Xonik Devices is a one man, in-my-spare-time operation. I do new designs as well as repairs.\n    </p>\n    <p>\n      If you want to get in touch with me, use the <a href={paths.contactMe}>contact form</a>\n    </p>\n    <h2>\n      Products on offer:\n    </h2>\n    <p>\n      <ul>\n        <li><a href={paths.keyboardController}>The Xonik 68b01 Prophet VS keyboard controller</a></li>\n        <li><a href={paths.mpg200}>MPG-200, a MIDI-to-PG-200 protocol converter for the\n          Roland\n          JX-3P/MKS-30</a></li>\n      </ul>\n    </p>\n    <h2>\n      Articles and blogs\n    </h2>\n    <p>\n      <ul>\n        <li><a href=\"http://xonikfusion.tumblr.com\">A mr. fusion powered Tesla model S</a></li>\n        <li><a href=\"http://atosynth.blogspot.com\">A to Synth, a project blog</a></li>\n        <li><a href=\"http://so909.blogspot.com\">So 909, a blog dedicated to the building of the\n          Machinebeats TR-909 clone</a></li>\n        <li><a href={paths.pg200}>The PG-200 protocol and pinout</a></li>\n        <li><a href={paths.xm8}>The Xonik Matrix 8 polyphonic synthesizer project</a></li>\n        <li><a href=\"http://atosynth.blogspot.no/2016/03/t-baneklokke-coundown-clock.html\">T-baneklokke - a way to get your wife to stop asking when to\n          leave</a></li>\n        <li><a href={paths.machinebeats}>The Machinebeats analog drum synthesizer</a></li>\n      </ul>\n    </p>\n    <h2>\n      Synth theory\n    </h2>\n    <p>\n      I have written a series of maths-heavy articles that explains the inner workings of a\n      typical relaxation saw wave\n      oscillator. They may be inaccurate as I wrote them to understand exactly what goes on, but\n      should nicely amend the\n      existing articles about temperature correction etc. found elsewhere.\n    </p>\n    <p>\n      <ul>\n        <li><a href=\"/theory/vco/expo_converter_1.html\">The VCO - part 1: Exponential converters\n          and temperature effects</a></li>\n        <li><a href=\"/theory/vco/expo_converter_2.html\">The VCO - part 2: Temperature\n          compensation</a></li>\n        <li><a href=\"/theory/vco/reference_current.html\">The VCO - part 3: Constant reference\n          current, saw wave generation</a></li>\n        <li><a href=\"/theory/expo_converter/expo_converter.html\">Exponential convertion - the\n          useful formulas</a></li>\n      </ul>\n    </p>\n  </div>;\n};","import React from 'react';\nimport architecture from './images/XM8-architecture-overview.png';\n\nexport default () => {\n  return <div>\n    <h1>Xonik Matrix 8</h1>\n    <p>\n      The XM8 is an 8 voice fully multi-timbral digital/analog hybrid synthesizer. It utilizes an\n      Oberheim Matrix style digital modulation matrix that lets the user add a large number of\n      ramps, envelopes, LFOs and countless other functions to control 3 analog VCOs, two analog\n      filters and various other analog circuitry.\n    </p>\n    <h2>Architecture overview</h2>\n    <p><img src={architecture} alt=\"XM8 Architecture overview\"/></p>\n    <h2>Synth UI</h2>\n    <p>\n      The synth will feature a huge number of knobs, buttons, switches and leds. None of these will\n      directly control the voice cards, instead, they are inputs to the OMM, see below, and are\n      completely configurable.\n    </p>\n    <p>\n      Instead of using encoders for the knobs, normal potentiometers will be used. The current\n      position will be indicated by 15 or 31 leds in a circle around the potentiometer.\n    </p>\n    <h2>Synth GUI</h2>\n    <p>\n      To make the XM8 easy to use and configure, all functionality is controlled through the browser\n      on a wifi-connected tablet or computer. The XM8 will act as a wifi access point if it cannot\n      connect to a previously configured network. It is possible to control any parameter -\n      potentiometers, switches, buttons etc from the browser, allthough it will\n      probably be more convenient to use the hardware versions for most functions.\n    </p>\n    <h2>OMM - the Open Modulation Matrix</h2>\n    <p>\n      Each voice card in the XM8 is controlled by a modulation matrix, or rather, a net of functions\n      that transforms user input to control voltages that affect the shaping of a sound. There are\n      no predefined signal sources (LFOs, ramps etc)as in the Oberheim, instead, any number of\n      sources may be added to the network (within reason of course) and any input can be used to\n      control any kind of function - including but not limited to LFOs, VCO pitch, filter cutoff,\n      pan, envelopes etc.\n    </p>\n    <p>\n      The matrix has 32 analog outputs, controlled by two 16 bit bipolar digital to analog\n      converters that run at approximately 2.5kHz per channel, and each voice card has its own\n      separate matrix running on a PIC32MX.\n    </p>\n    <h2>OMMNoM - the OMM Node Manager</h2>\n    <p>\n      The node manager is a graphical tool that lets the user build a modulation matrix by\n      dragging and dropping nodes. It runs in the connected browser.\n    </p>\n    <h2>Power switching</h2>\n    <p>\n      As the XM8 is controlled by a computer running a stock OS (Minibian), it will be equipped\n      with an internal UPS with battery support that lets the Raspberry PI shut down in an orderly\n      fashion whenever the user yanks the power plug or turns off the synth using the power\n      switch.\n    </p>\n  </div>;\n};\n\n/*\n  <h2>Voice cards</h2>\n<h2>Shared functionality</h2>\n<h2>FX</h2>\n*/","import React from 'react';\nimport sixPinDin from './images/6_pin_din.png';\nimport pg200switches from './images/pg-200-switches.png';\nimport pg200tx from './images/pg-200-tx.png';\n\nexport default () => {\n  return <div>\n    <h1>Free the PG-200!</h1>\n    <p>\n      In april 2012, I decoded the PG-200 protocol. Using a Saleae logic probe I took a closer look\n      at what happened while using the PG-200, and built a device that converts MIDI CC messages\n      into PG-200 commands. This device, the MPG-200, also receives and transmits MIDI note\n      messages, making it possible to completely control the JX-3P using MIDI.\n    </p>\n    <p>\n      To my knowledge, at the time I started the project only two other devices existed that could\n      do this - the KiwiTechnics JX-3P upgrade and Patch Editor and the Organix Midi upgrade kit.\n      These both require extensive modification of the JX-3P. Later, Mode machines made a PG-200\n      clone called the DT-200. I have yet to see the PG-200 protocol fully documented, but I may\n      have missed something as I have not searched the web lately.\n    </p>\n    <p>\n      As a tiny gift to the synth community in honor of my daughter's birth, I now release all the\n      information I have gathered.\n      This document is based on the data found in the <a\n      href=\"/images/jx3p-service-manual.pdf\" target=\"_blank\">JX-3P/PG-200\n      service manual</a> as well as a lot of work done by myself. Feel free to use it in any way\n      you see fit, but I would be really happy if you acknowledged my contribution.\n    </p>\n    <h2>Protocol basics</h2>\n    <ul>\n      <li>9 bit, no parity, async serial, 31.25kHz</li>\n      <li>\"Start-stop\"-system. To start a frame, the TX line is pulled low. When transmission has\n        finished the TX line is pulled high and remains high until the next byte.\n      </li>\n      <li>8 value or address bits, 9th bit indicates if byte is a value/mask or an address:<br/>\n        <ul>\n          <li>0: Value or mask</li>\n          <li>1: Address</li>\n        </ul>\n      </li>\n      <li>Minimum time between two commands seems to be at least 17 ms</li>\n      <li>Time between bytes in a command may be as little as 70 us</li>\n      <li>The PG-200 has a busy-line but it doesn't seem to be used</li>\n      <li>Data on the cable is inverted by the output driver transistor</li>\n      <li>Address is sent for every value (or value + mask) byte. No running statuses</li>\n      <li>Potentiometer values are 8 bit (0-255) unlike MIDI which is 7 bits</li>\n    </ul>\n    <p>\n      From the service manual: Data is transfered LSB first, the 9th bit indicates data type.<br/>\n      <img src={pg200tx} width=\"524\"/>\n    </p>\n    <h2>Commands</h2>\n    <p>Commands are grouped into two main categories - potentiometers and switches. All the\n      addresses and values described below are the data the way they are sent from the MCU. The\n      signal is inverted before it is put on the wire, so to measure them correctly you have to\n      setup your logic probe for an inverted signal.</p>\n    <h3>Potentiometers</h3>\n    <p>\n      Potentiometers transmit one address and one value byte. Data is 8 bit, thus ranging from 0\n      to 255<br/>\n      <ul>\n        <li>1: Address</li>\n        <li>2: Value (0-255)</li>\n      </ul>\n    </p>\n    <p>\n      All potentiometers have addresses above 15, so it's easy to check if it is a potentiometer\n      or switch that is being sent/received.\n    </p>\n\n    <p>Potentiometer addresses:</p>\n    <div className=\"left-table\">\n      <table>\n        <tr>\n          <th>Potmeter</th>\n          <th>Address</th>\n        </tr>\n        <tr>\n          <td>Fine tune</td>\n          <td>16</td>\n        </tr>\n        <tr>\n          <td>Tune</td>\n          <td>17</td>\n        </tr>\n        <tr>\n          <td>Env amount</td>\n          <td>18</td>\n        </tr>\n        <tr>\n          <td>LFO amount</td>\n          <td>19</td>\n        </tr>\n        <tr>\n          <td>Source mix</td>\n          <td>20</td>\n        </tr>\n        <tr>\n          <td>HPF</td>\n          <td>21</td>\n        </tr>\n        <tr>\n          <td>Resonance</td>\n          <td>22</td>\n        </tr>\n        <tr>\n          <td>Cut off freq</td>\n          <td>23</td>\n        </tr>\n        <tr>\n          <td>Env mod</td>\n          <td>24</td>\n        </tr>\n      </table>\n    </div>\n\n    <div>\n      <table>\n        <tr>\n          <th>Potmeter</th>\n          <th>Address</th>\n        </tr>\n        <tr>\n          <td>LFO mod</td>\n          <td>25</td>\n        </tr>\n        <tr>\n          <td>Pitch follow</td>\n          <td>26</td>\n        </tr>\n        <tr>\n          <td>VCA level</td>\n          <td>27</td>\n        </tr>\n        <tr>\n          <td>LFO rate</td>\n          <td>28</td>\n        </tr>\n        <tr>\n          <td>LFO delay time</td>\n          <td>29</td>\n        </tr>\n        <tr>\n          <td>Attack</td>\n          <td>30</td>\n        </tr>\n        <tr>\n          <td>Decay</td>\n          <td>31</td>\n        </tr>\n        <tr>\n          <td>Sustain</td>\n          <td>32</td>\n        </tr>\n        <tr>\n          <td>Release</td>\n          <td>33</td>\n        </tr>\n      </table>\n    </div>\n    <h3>Switches</h3>\n    <p>\n      Switches use one or two bits each, so several switches are grouped into one value byte with\n      the same address. A bitmask is used to indicate which bits have changed (e.g. what switch\n      has been moved). The mask is calculated by bitwise xor'ing the previous and the current\n      state of the switch.\n    </p>\n    <p>\n      A switch command consists of three bytes:<br/>\n      <ul>\n        <li>1: Group address</li>\n        <li>2: Bit mask (1 where bits have changed, 0 elsewhere)</li>\n        <li>3: Value</li>\n      </ul>\n    </p>\n\n    <p>Switch commands. Bits in the table below are with LSB to the right.</p>\n\n    <table>\n      <tr>\n        <th>Switch</th>\n        <th>Group address</th>\n        <th>Bits</th>\n        <th>Valid values</th>\n      </tr>\n      <tr>\n        <td>DCO 1 range</td>\n        <td>0</td>\n        <td>0,1</td>\n        <td>\n          xxxxxx00: 16'<br/>\n          xxxxxx01: 8'<br/>\n          xxxxxx10: 4'\n        </td>\n      </tr>\n      <tr>\n        <td>DCO 1 waveform</td>\n        <td>0</td>\n        <td>2,3</td>\n        <td>\n          xxxx00xx: Saw<br/>\n          xxxx01xx: Pulse<br/>\n          xxxx10xx: Square\n        </td>\n      </tr>\n      <tr>\n        <td>DCO 2 range</td>\n        <td>0</td>\n        <td>4,5</td>\n        <td>\n          xx00xxxx: 16'<br/>\n          xx01xxxx: 8'<br/>\n          xx10xxxx: 4'\n        </td>\n      </tr>\n      <tr>\n        <td>DCO 2 waveform</td>\n        <td>0</td>\n        <td>6,7</td>\n        <td>\n          00xxxxxx: Saw<br/>\n          01xxxxxx: Pulse<br/>\n          10xxxxxx: Square<br/>\n          11xxxxxx: Noise\n        </td>\n      </tr>\n      <tr>\n        <td>Crossmod</td>\n        <td>1</td>\n        <td>0,1</td>\n        <td>\n          xxxxxx00: Off<br/>\n          xxxxxx01: Sync<br/>\n          xxxxxx10: Metal\n        </td>\n      </tr>\n      <tr>\n        <td>Env polarity, VCF</td>\n        <td>1</td>\n        <td>2</td>\n        <td>\n          0: Inverted<br/>\n          1: Normal\n        </td>\n      </tr>\n      <tr>\n        <td>VCA mode</td>\n        <td>1</td>\n        <td>3</td>\n        <td>\n          0: Gate<br/>\n          1: Envelope\n        </td>\n      </tr>\n      <tr>\n        <td>Env switch DCO 2</td>\n        <td>1</td>\n        <td>4</td>\n        <td>\n          0: Off<br/>\n          1: On\n        </td>\n      </tr>\n      <tr>\n        <td>LFO switch DCO 2</td>\n        <td>1</td>\n        <td>5</td>\n        <td>\n          0: Off<br/>\n          1: On\n        </td>\n      </tr>\n      <tr>\n        <td>Env switch DCO 1</td>\n        <td>1</td>\n        <td>6</td>\n        <td>\n          0: Off<br/>\n          1: On\n        </td>\n      </tr>\n      <tr>\n        <td>LFO switch DCO 1</td>\n        <td>1</td>\n        <td>7</td>\n        <td>\n          0: Off<br/>\n          1: On\n        </td>\n      </tr>\n      <tr>\n        <td>LFO waveform</td>\n        <td>2</td>\n        <td>0,1</td>\n        <td>\n          xxxxxx00: Sine<br/>\n          xxxxxx01: Square<br/>\n          xxxxxx10: Random\n        </td>\n      </tr>\n      <tr>\n        <td>Env polarity, DCOs</td>\n        <td>2</td>\n        <td>2</td>\n        <td>\n          0: Inverted<br/>\n          1: Normal\n        </td>\n      </tr>\n      <tr>\n        <td>Chorus</td>\n        <td>2</td>\n        <td>3</td>\n        <td>\n          0: Off<br/>\n          1: On\n        </td>\n      </tr>\n    </table>\n    <p>\n      <br/>\n      Value and address bytes are closely related to the hardware layout of the PG-200:\n    </p>\n    <p>\n      <img src={pg200switches} width=\"524\"/>\n    </p>\n    <p>\n      The rows, P10-P13 correspond to the group addresses. The columns are read as the switch\n      value. Each column is pulled high when not sunk to ground through the diodes.\n    </p>\n    <p>\n      For example, the A-range (DCO 1 range) switch is a dual throw, three pole switch. When it is\n      in the bottom position (corresponding to '16), neither DB1 or DB0 are connected to P10, and\n      are thus left pulled up and read as xxxxxx11. However, in the middle position ('8), DB0 is\n      pulled down when P10 goes low, but DB1 is left pulled up, reading xxxxxx10. Finally, the top\n      position ('4) reads as xxxxxx01. Notice that this is the inverse of the value byte sent to\n      the JX-3P, the MCU inverts the signal for some reason. It looks a bit weird, but I've double\n      checked this with probes running directly from the scanlines/data input lines.\n    </p>\n    <h3>Special commands</h3>\n    <p>\n      The PG-200 sends three special commands that are not on the switch/potentiometer formats:\n    </p>\n    <table>\n      <tr>\n        <th>Command</th>\n        <th>Address</th>\n        <th>Value</th>\n      </tr>\n      <tr>\n        <td>Manual</td>\n        <td>130</td>\n        <td>all address/value bytes (?)</td>\n      </tr>\n      <tr>\n        <td>Write</td>\n        <td>129</td>\n        <td>0</td>\n      </tr>\n      <tr>\n        <td>Ping (sent on startup)</td>\n        <td>128</td>\n        <td>0</td>\n      </tr>\n    </table>\n\n    <h2>The PG-200 cable</h2>\n    <p>\n      The PG-200 is connected to the JX-3P using a 6 pin DIN connector. The cable is one-to-one,\n      pin 1 is connected to pin 1 on the other end of the cable etc. The shield is not connected.\n      Power is provided to the PG-200 by the JX-3P.\n    </p>\n    <p>\n      The six pins are as follows:<br/>\n      <ul>\n        <li>1: -15V</li>\n        <li>2: +15V</li>\n        <li>3: +7V</li>\n        <li>4: GND</li>\n        <li>5: TX</li>\n        <li>6: Busy</li>\n      </ul>\n    </p>\n    <p>\n      This is the pin numbering looking into the front of a female din connector (image is\n      borrowed from <a\n      href=\"http://www.digitalpeer.com/blog/diy-hitec-optic-6-cable-for-phoenix-rc-simulator\">digitalpeer</a>).<br/>\n      <img src={sixPinDin} width=\"140\"/>\n    </p>\n\n    <h2>Gotchas</h2>\n    <p>\n      There are a couple of things you need to be aware of with the PG-200/JX-3P.\n    </p>\n\n    <h3>Initial ping</h3>\n    <p>\n      When the pg-200 starts up, it sends an initial command to tell the JX-3P that it is present.\n      Without this, the JX-3P won't receive data from the pg-200.\n    </p>\n    <h3>MIDI vs PG-200 input</h3>\n    <p>\n      The JX-3P uses the same input pin on its microcontroller for receiving midi and PG-200 data.\n      Both MIDI and PG-200 data is transmitted at 31.25kHz, but PG-200 uses 9 bits and midi 8. The\n      interfacing electronics are also different. To know which one to expect, the JX-3P checks\n      the state of the input switch.\n    </p>\n    <p>\n      When creating a replacement for the PG-200, it is possible to automate the switching\n      between modes by utilizing one of the unused pins in the MIDI cable. By doing this and\n      controlling when midi and PG-200 data is sent to the JX-3P, it is possible to create a\n      converter circuit that gives the JX-3P MIDI CC support. There is however a major\n      problem.\n    </p>\n    <p>\n      The JX-3P does not have a dedicated input on the MCU for the mode switch. Instead, it is\n      scanned at certain intervals just like the other switches on the front panel (time\n      multiplexing). This means one have to wait a while after changing the mode before\n      transmitting data. If data is transmitted too soon, you will get hanging notes and other\n      funny errors. Alas, this makes it impossible to efficiently use a daw to control both\n      the midi notes and the midi CC at the same time without caring about timing issues. You\n      may of course use the PG-200 at the same time as you play the JX-3P using the keyboard.\n    </p>\n    <p>\n      There is no easy way around this, and this is one of the reasons other PG-200\n      replacement kits require you to swap the internal MCU or ROM chip for a custom one. The\n      effect may be minimized by listening to the scanline that is pulled up/down when the\n      switch is read, to get as short a delay as possible between modes, but you still get a\n      noteable delay. In my experience, the minimum delay between scans is 12ms while I have\n      experienced delays of up to .23 seconds.\n    </p>\n\n    <p>\n      Read more about the MPG-200 and my other projects on my project blog <a\n      href=\"http://atosynth.blogspot.com\" target=\"_blank\">A to Synth</a>\n    </p>\n  </div>;\n};","import React from 'react';\n\nexport default () => {\n  return <div>\n    <h1>Machinebeats drum synthesizer</h1>\n    <p>\n      The Machinebeats is a digital/analog drum synthesizer combining the sound generating circuits\n      of the Roland TR-909 with a modern display based interface.\n    </p>\n    <p>\n      Main features:<br/>\n      <ul>\n        <li>12 channel 32 step sequencer</li>\n        <li>Real time record or step by step pattern entry</li>\n        <li>Selectable swing/groove percentage</li>\n        <li>Tempo control through tap-tempo key</li>\n        <li>Storage for 8 x 12 patterns</li>\n        <li>Song mode that lets you organise patterns into songs</li>\n        <li>Performance mode that continously plays patterns, selectable at runtime</li>\n        <li>One click accent and fully variable per step per channel velocities</li>\n        <li>Clip board with special swap function that stores the overwritten steps in the clipboard\n          on paste\n        </li>\n        <li>Multi-tap alpha numeric keypad for pattern name entry</li>\n        <li>Per-channel solo and mute functionality</li>\n        <li>Flam for multiple beats within a single step</li>\n        <li>Phones output, individual and mixed outputs</li>\n        <li>Midi in, out and thru</li>\n        <li>Midi-to-Din sync conversion with dual output</li>\n        <li>Per-channel configurable default normal and accent velocities</li>\n        <li>Midi output from sequencer with selectable note and midi channel per sequencer channel\n        </li>\n      </ul>\n    </p>\n    <p>\n      The Machinebeats is controlled by a Microchip PIC18F microcontroller. The audio circuits are\n      based on the PCBs by Trevor Page, now found at <a href=\"http://www.9090project.co.uk/\">The\n      9090 project</a>\n    </p>\n    <p>\n      For insights into the construction of the synthesizer, see the <a\n      href=\"http://so909.blogspot.no\">So 909 blog</a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272314.JPG\">\n        <img alt=\"Machinebeats\" src=\"/images/machinebeats/small/P3272314.JPG\"/>\n      </a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272318.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272318.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272330.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272330.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272341.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272341.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272346.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272346.JPG\"/></a>\n    </p>\n\n\n    <p>\n      <a href=\"/images/machinebeats/P3272352.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272352.JPG\"/></a>\n    </p>\n\n    <p>\n      <a href=\"/images/machinebeats/P3272367.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272367.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272376.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272376.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272377.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272377.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272348.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272348.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272358.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272358.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272359.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272359.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272361.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272361.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272362.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272362.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272363.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272363.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272316.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272316.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272338.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272338.JPG\"/></a>\n    </p>\n    <p>\n      <a href=\"/images/machinebeats/P3272349.JPG\"><img alt=\"Machinebeats\"\n                                                       src=\"/images/machinebeats/small/P3272349.JPG\"/></a>\n    </p>\n  </div>;\n};","import React from 'react';\nimport { paths } from '../../router/routes';\n\nexport default () => {\n  return <div>\n    <h1>MPG-200 v6 DIY Kit</h1>\n    <p>\n      Price: 50 EUR + postage\n    </p>\n    <p>\n      <a href={paths.mpg200order} title=\"Order here\">ORDER HERE</a>\n    </p>\n\n    <p>\n      <a href={paths.mpg200buildersGuide} title=\"Builders guide\">Already ordered? Check out the\n        builder's guide!</a>\n    </p>\n\n    <h2>About the MPG-200</h2>\n    <p>\n      The MPG-200 is an affordable replacement for the PG-200 synthesizer programmer. It is a\n      protocol translator for vintage Roland synths that use the PG-200 - JX-3P, MKS-30 and GR-700.\n      It translates standard midi CC-messages into the proprietary PG-200 format necessary to\n      control the synths, making it possible to use a DAW, hardware midi controller or\n      other synth in place of the expensive PG-200.\n    </p>\n    <p>\n      No internal modification of your synth is necessary, as the MPG-200 does a direct translation\n      into the PG-200 data format.\n    </p>\n    <p>\n      The MPG-200 comes with Midi thru, so you don't have to use a splitter if you want to control\n      both\n      playing and parameter noodling of your MKS-30 from the same midi source.\n    </p>\n    <p>\n      The MPG-200 is configurable and upgradable through Midi.\n    </p>\n    <h2>Kit</h2>\n    <p>\n      The MPG-200 comes as a build it yourself kit with all the required parts, including a 60 cm\n      long\n      4 conductor cable (you have to solder the connectors yourself). No enclosure is included but I\n      plan to offer a laser cut enclosure separately later. The MPG-200 is easy to build, having\n      only\n      a handfull of parts. Soldering the cable is a bit tricky but should also be manageable.\n    </p>\n    <h2>\n      Price\n    </h2>\n    <p>\n      The MPG-200 costs EUR 50 + postage. Postage is EUR 7 throughout Europe and EUR 8.5 to the rest\n      of\n      the world, untracked. Multiple MPG-200 may be shipped together for the same price, though I\n      will have to check how many.\n    </p>\n    <p>\n      Some countries may require tracked/registered mail at my discretion unless you chose to accept\n      the\n      risk yourself. Registered mail is about EUR 28. I will of course inform you of this before\n      accepting your order.\n    </p>\n    <h2>\n      Configuring\n    </h2>\n    <p>\n      The MPG-200 is highly configurable through Sysex. Each parameter is mappable to any Midi CC,\n      and switch range boundaries are individuably mappable for each switch.\n    </p>\n    <p>\n      A sysex file generator can be found at <a\n      href=\"/mpg-200-sysex/mpg200.html\">xonik.no </a>. It lets you tweak\n      the parameters and generate a valid configuration sysex. You can map each PG-200 parameter to\n      any CC on any midi channel you like. If your browser supports WebMIDI you can even update the\n      configuration directly from the browser.\n    </p>\n    <h2>\n      Firmware\n    </h2>\n    <p>\n      Firmware on the MPG-200 can be updated through MIDI, in case I come up with new features or\n      bugs\n      need to be fixed. As with the settings, an online WebMIDI-based firmware updater is found\n      at <a href=\"/bootloader/index.html\">xonik.no</a>.\n    </p>\n    <h2>Things to be aware of</h2>\n    <p>\n      There are some limitations to the MPG-200. Most importantly: Because it works exactly like the\n      PG-200, it won't let you use midi for playing notes on the JX-3P at the same time as you tweak\n      parameters through the MPG-200 (PS: The MKS-30 has no problem with this). This is simply not\n      possible without modifying the JX-3P, and is\n      the reason why you have to replace the internal CPU / ROM when upgrading the JX with a\n      Kiwitechnics\n      kit. I did make an MPG-200 version earlier that could take control of the \"Programmer/MIDI\"\n      switch on the back of the JX-3P. However, even if it was possible to switch automatically, a\n      delay of up to half a second after switching between midi and PG-200 was required for the\n      synth\n      to notice the change, making it impossible to mix the two in practice. It also made the\n      MPG-200\n      firmware incredibly complex as it had to buffer incoming midi to prevent lost commands while\n      in\n      the wrong mode. For this version I chose usability and stability over additional features.\n    </p>\n    <p>\n      The midi thru does not filter out CC messages for the MPG-200 from the midi stream, so any\n      messages will be forwarded to the MKS-30 as well. This may not be an issue though, but I have\n      not\n      tried flooding the MKS-30 with messages to see how it handles that. I have however left a\n      possibility for adding midi message filtering later - it is possible to disconnect the midi\n      thru\n      from the midi input, effectively making it a midi out port instead, but this will require\n      firmware changes.\n    </p>\n    <p>\n      The provided cable has only four conductors. The original PG-200 uses six as it needs +/-15V\n      to power the internal opamps. These are not needed on the MPG-200 and are therefore left out.\n      This means that you cannot use the cable to replace a missing PG-200 cable. You CAN however\n      get your own six conductor cable and use the provided connectors to make a PG-200 cable. More\n      info about the PG-200 can be found <a href={paths.pg200}>here</a>.\n    </p>\n    <p>\n      For the time being you will have to build your own enclosure, or leave the MPG-200 without\n      one.\n      If you choose the latter, make sure you insulate the botton to prevent it from coming into\n      contact with anything conductive, this may short circuit and destroy the MPG-200. I plan on\n      offering a laser cut enclosure in the future.\n    </p>\n    <p>\n      The MPG-200 does not have any knobs or switches, it is a pure electronical protocol\n      translator. You need to bring your own midi controller.\n    </p>\n  </div>;\n};","import React from 'react';\nimport './PageMpg200BuildersGuide.scss';\nimport diodeImage from './images/1n4148.jpg';\nimport resistorsImage from './images/resistors.jpg';\nimport dilSocketsImage from './images/dil-sockets.jpg';\nimport transistorsVoltageRegImage from './images/transistor-voltage_reg.jpg';\nimport dinSocketsImage from './images/din-sockets.jpg';\nimport jack from './images/jack.jpg';\nimport jacksImage from './images/jacks.jpg';\nimport jackParts from './images/jack-parts.jpg';\nimport sixPinDin from './images/6_pin_din.png';\nimport jackInner from './images/jack-inner.jpg';\nimport ledImage from './images/led.jpg';\nimport capImage from './images/cap.jpg';\nimport ellytcapsImage from './images/ellytcaps.jpg';\nimport ic6n137Image from './images/6n137.jpg';\nimport microcontrollerImage from './images/microcontroller.jpg';\nimport ImageWithDescription from './ImageWithDescription';\n\nexport default () => {\n  return <div>\n    <h1>MPG-200 v6.1 Builders guide</h1>\n    <p>\n      The MPG-200 is an affordable replacement for the PG-200 synthesizer programmer. It is a\n      protocol translator for vintage Roland synths that use the PG-200 - JX-3P, MKS-30 and GR-700.\n      It translates standard midi CC-messages into the proprietary PG-200 format necessary to\n      control the synths, making it possible to use a DAW, hardware midi controller or other synth\n      in place of the expensive PG-200.\n    </p>\n    <p>\n      This guide lists the parts supplied in the kit and helps you build the device.\n    </p>\n    <h2>Known errors</h2>\n    <p>\n      There are no known errors on the MPG-200 v6.1\n    </p>\n    <h2>Parts list</h2>\n    <p>\n      There are no part numbers on the circuit board, but each component is clearly labeled with\n      its value and placement.\n    </p>\n    <p>\n      Here is a list of parts included in the kit, along with some things to take into account.\n    </p>\n    <table className='builders-guide_parts-table'>\n      <thead>\n      <tr>\n        <th>Count</th>\n        <th>Type</th>\n        <th>Value</th>\n        <th>Special considerations</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr>\n        <td>1</td>\n        <td>PCB</td>\n        <td>MPG-200 circuit board</td>\n        <td/>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Diode</td>\n        <td>1N4148</td>\n        <td>Must be put in the right way, match the black on the part with the white line on the\n          PCB\n        </td>\n      </tr>\n      <tr>\n        <td>3</td>\n        <td>Resistor</td>\n        <td>1kOhm</td>\n        <td/>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Resistor</td>\n        <td>22kOhm</td>\n        <td/>\n      </tr>\n      <tr>\n        <td>5</td>\n        <td>Resistor</td>\n        <td>220Ohm</td>\n        <td/>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Resistor</td>\n        <td>4.7kOhm</td>\n        <td/>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>DIL socket</td>\n        <td>8 pin</td>\n        <td>Match the half circle on the socket with the white half circle on the PCB</td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>DIL socket</td>\n        <td>14 pin</td>\n        <td>Match the half circle on the socket with the white half circle on the PCB</td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>LED</td>\n        <td>3mm red</td>\n        <td>Match the flat side (-) on the LED with the flat line on the PCB. The long leg of the\n          LED goes into the hole labeled +. If you want to use my enclosure, make sure to bend the\n          LED and solder it so that it protrudes through the hole in the enclosure. In this case you\n          would also want to solder the LED last.\n        </td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Film Capacitor</td>\n        <td>100nF</td>\n        <td>No particular direction, the two legs are interchangeable</td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Voltage regulator</td>\n        <td>78L05</td>\n        <td>Match the flat side on the part with the flat side on the PCB. Make sure not to mix\n          78L05, 2N3904 and 2N3906 as they look very similar.\n        </td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Transistor</td>\n        <td>2N3904</td>\n        <td>Match the flat side on the part with the flat side on the PCB. Make sure not to mix\n          78L05, 2N3904 and 2N3906 as they look very similar.\n        </td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Transistor</td>\n        <td>2N3906</td>\n        <td>Match the flat side on the part with the flat side on the PCB. Make sure not to mix\n          78L05, 2N3904 and 2N3906 as they look very similar.\n        </td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Electrolytic Capacitor</td>\n        <td>10uF</td>\n        <td>Match the long leg on the capacitor with the hole labeled + on the PCB. Inserting it the\n          wrong way will make it explode when power is turned on.\n        </td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Electrolytic Capacitor</td>\n        <td>22uF</td>\n        <td>Match the long leg on the capacitor with the hole labeled + on the PCB. Inserting it the\n          wrong way will make it explode when power is turned on.\n        </td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>DIN socket</td>\n        <td>5 pin (Midi)</td>\n        <td/>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>DIN socket</td>\n        <td>6 pin (PG-200)</td>\n        <td/>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Optocoupler</td>\n        <td>6N137</td>\n        <td>The dot on the IC is pin number 1 and should face in the same direction as the half\n          circle on the socket.\n        </td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Microcontroller</td>\n        <td>PIC16F18325 or PIC16F15325</td>\n        <td>The dot on the IC is pin number 1 and should face in the same direction as the half\n          circle on the socket.\n        </td>\n      </tr>\n      <tr>\n        <td>2</td>\n        <td>Connectors</td>\n        <td>6 pin (PG-200)</td>\n        <td>Take extreme care not to overheat the pins when soldering the wires. My trick is to\n          insert the pins into a potato to cool them while soldering. <strong>Overheated pins will\n            melt the plastic around them, making them come loose. I cannot take responsibility for\n            melted pins.</strong> PS: Remember to put the black plastic outer parts onto the cable\n          before soldering the ends or you won't be able to slide them over the connector later!\n        </td>\n      </tr>\n      <tr>\n        <td>1</td>\n        <td>Cable</td>\n        <td>4 conductor</td>\n        <td/>\n      </tr>\n      </tbody>\n    </table>\n    <h2>Part images</h2>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={diodeImage}\n      label=\"1N4148 diode. Black line equals line in symbol on circuit board, it is important to match up the black line on the component with the white line on the circuit board.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={resistorsImage}\n      label=\"Resistors. From the top: 1 x 4.7kOhm, 2 x 22kOhm, 3 x 1kOhm, 5 x 220Ohm. These do not have direction.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={ledImage}\n      label=\"LED. bottom, long leg is positive (+), top is negative. Flat side (top) is negative.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={capImage}\n      label=\"Film capacitor, 100nF. Has no direction/positive and negative terminals.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={ellytcapsImage}\n      label=\"Electrolytics capacitors (polarized). Small cap is 22uF, larger one is 10uF. Long leg is positive, short is negative. Negative side is also marked on the casing. It is extremely important to fit these the right way around or they will explode.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={dilSocketsImage}\n      label=\"IC sockets for MCU and 6N137 optocoupler. The dot on the IC should line up with the lower right pin in the picture. Make sure to insert the sockets according to the symbol on the circuit board (half circles facing the same direction).\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={ic6n137Image}\n      label=\"Optocoupler IC. The dot indicates leg nr 1, and should face the same direction as the half circle on the socket.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={microcontrollerImage}\n      label=\"PIC18F15325 microcontroller. The dot indicates leg nr 1, and should face the same direction as the half circle on the socket.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={transistorsVoltageRegImage}\n      label=\"2N3904 and 2N3906 transistors, 78L05 voltage regulator. It may be hard to read the labeling on these but it is absolutely crucial that they are not mixed. Make sure that they are placed the right way around, the flat side of the transistor should face the flat side of the symbol on the circuit board.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={dinSocketsImage}\n      label=\"DIN sockets - One 6 pin socket for the PG-200 cable, and two 5p sockets for MIDI in and MIDI thru.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={jacksImage}\n      label=\"6 pin DIN jacks for the PG-200 cable. These are a bit hard to solder as the plastic around the pins melts if it get too hot.\"/>\n    <h2>Assembly hints</h2>\n    <p>\n      In general: Take ESD measures to prevent the parts from being destroyed by static\n      electricity. Wear a grounded anti-static wrist band while working. While the chances of\n      breaking a part is small, I can take no responsibility for parts destroyed by ESD.\n    </p>\n    <p>\n      Warning: no part of the device, and especially the soldered legs of the electronic parts,\n      should ever touch a conducting surface while the device is plugged in. This may short circuit\n      the device, possibly destroying it and/or your synth. Usage of some kind of enclosure is\n      strongly recommended!\n    </p>\n    <p>\n      Part legs should be cut as close as possible to the PCB (after soldering) to prevent them\n      from touching an enclosure, should you choose to use one.\n    </p>\n    <p>\n      Parts should preferably be soldered in the order they are listed in the parts list, this\n      assures\n      that low parts are added before the taller ones, making soldering easier.\n    </p>\n    <p>\n      Integrated circuits (6N137 optocoupler and PIC16F microcontroller) should be socketed to make\n      it easier to replace them in case of an error, so solder the 8p and 14 sockets and insert the\n      ICs after everything else is soldered and cleaned.\n    </p>\n    <p>\n      LED: If you want you can make the status LED visible from outside any enclosure you choose\n      for your MPG-200. In that case it is probably best to mount it last when you know exactly\n      where\n      it should go.\n    </p>\n    <h2>\n      MIDI thru\n    </h2>\n    <p>\n      The solder-jumper on the underside of the circuit board connects\n      Midi in and Midi out when closed (pic), effectively making a Midi thru. This is the default,\n      as the MPG-200 currently does not\n      output any Midi data. The jumper is there in case I come up with a super cool idea that can\n      utilize Midi out in the future (The MPG-200 firmware is updatable through sysex).\n    </p>\n    <h2>\n      Cable\n    </h2>\n    <p>\n      The MPG-200 is connected to the synth using a 6 pin DIN connector. The cable is one-to-one,\n      pin 1 is connected to pin 1 on the other end of the cable etc. The shield is not connected.\n      Power is provided to the PG-200 by the synth\n    </p>\n    <p>\n      While the PG-200 connector has 6 pins, only 4 are used by the MPG-200. Thus, the supplied\n      cable only has 4 connectors. The original PG-200 uses the two last connectors for +/-15V, to\n      power its opamps. You are of course free to use a 6 conductor cable if you want to make a\n      PG-200 compatible cable, the four remaining conductors are wired exactly the same way for\n      the PG-200 and MPG-200.\n    </p>\n    <p>\n      The six pins are as follows:\n      <ol>\n        <li>-15V <strong>- Not connected on the MPG-200</strong></li>\n        <li>+15V <strong>- Not connected on the MPG-200</strong></li>\n        <li>+7V</li>\n        <li>GND</li>\n        <li>TX</li>\n        <li>Busy</li>\n      </ol>\n    </p>\n    <p>This is the pin numbering looking into the <strong>front</strong> of a female din connector,\n      or similarly, from inside the male connector.</p>\n    <img src={sixPinDin} alt=\"Six pin DIN\" width=\"100\"/>\n    <p>\n      It is important to keep the connector cool while soldering. If the metal pins in the\n      connector get too hot, they will melt the surrounding plastic and come loose. An old trick\n      is sticking the connector into a potato to cool them just enough to prevent this. I also\n      find that I usually fill the hole in the pin with solder, tin the wire and then heat them\n      simultaneously to make them stick together.\n    </p>\n    <p>\n      Soldering the cable is in my opinion the hardest part of this build. Unfortunately I\n      cannot take responsibility for melting connectors, so solder with care!\n    </p>\n    <p>\n      <strong>\n        PS: Before soldering the wires, remember to put the black plastic cover over the\n        cable, or else you will have to desolder one end! Also, bend the other end of the metal\n        shield over the cable, this acts as stress relief.</strong>\n    </p>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={jack}\n      label=\"To open the jack, push the metal part inside the square hole down. If you bend it too much it can be bent back before putting the plastic back on.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={jackParts}\n      label=\"All parts of the jack. In my experience, filling the holes in the pins (to the left) with solder, soldering the tips of the wires and reheating everything while inserting the wires one at a time works quite well.\"/>\n    <ImageWithDescription\n      className=\"part-image\"\n      src={jackInner}\n      label=\"Jack shield. The clamps to the right of the bottom one should be bent around the cable.\"/>\n    <h2>\n      Enclosure\n    </h2>\n    <p>\n      There is no enclosure supplied with the MPG-200. If you build your own, make sure that the\n      pins on the underside of the PCB do not touch the bottom of the enclosure, especially if\n      it's made of metal. Use spacers with the screw holes, or a thick fibre tape.\n    </p>\n    <p>\n      I am working on different enclosure options that can be purchased separately in the future.\n    </p>\n    <h2>\n      Firmware update\n    </h2>\n    <p>\n      The MPG-200 firmware is sysex updatable. <a href=\"http://www.xonik.no/bootloader/index.html\">A firmware updater can be found here.</a>\n    </p>\n    <h2>\n      Midi settings\n    </h2>\n    <p>\n      The MPG-200 settings - what CC controls what PG-200 controller - is configurable through\n      sysex. See separate instructions. <a href=\"http://www.xonik.no/mpg-200/sysex/mpg200.html\">A sysex settings generator is available.</a>\n    </p>\n    <h2>General disclaimer</h2>\n    <p>\n      While the device has been thoroughly tested, I cannot be held responsible for the\n      destruction of anything connected to the device through the Midi or PG-200 ports (i.e. your\n      synth or other equipment).\n    </p>\n  </div>;\n};","import React from 'react';\nimport { paths } from '../../router/routes';\nimport nono from './images/nono.jpg';\nimport yesyes from './images/yesyes.jpg';\n\nexport default () => {\n  return <div>\n    <h1>Prophet VS keyboard controller</h1>\n    <p>\n      Is the keyboard controller in your Prophet VS broken? Don't do this:\n    </p>\n    <p><img src={nono} alt=\"Broken controller\"/></p>\n    <p>do this:</p>\n    <p><img src={yesyes} alt=\"Xonik Devices' replacement\"/></p>\n    <p>\n      The Xonik 68b01 is a drop-in replacement for the original 68B01 keyboard controller chip.\n      Though both the Xonik 68b01 and the original are microcontrollers with an internal program,\n      the Xonik 68B01 is not a copy but a recreation using a modern Microchip MCU. It has the same\n      velocity sensitivity as the original chip and will work straight out of the box.\n    </p>\n    <h2>Purchase</h2>\n    <p>\n      I have 8 Xonik 68b01 ready to go and several more PCBs available should these be sold out.\n      Reserve yours and get a shipping quote by emailing me.\n    </p>\n    <p>\n      Price: USD 99.00\n    </p>\n    <p>\n      <a href={paths.contactMe}>Contact me here if you want to buy one</a>\n    </p>\n    <h2>Compatible synths</h2>\n    <p>\n      The Xonik 68b01 was developed for and has been tested with the Sequential Circuits Prophet VS.\n      The original chip may be labeled \"AMI 8680MAL Sequential I-626 Philipines\" and has part number\n      U307 in the service manual.\n    </p>\n    <p>\n      The parts list for the Sequential Circuits MultiTrak lists the same kind of controller (U230,\n      SCI Part # I-612, shown as 6801 in the service manual schematics), though I cannot guarantee\n      that it works. The circuit diagram is almost identical to the Prophet VS though, so it is\n      quite possible that it will work as expected.\n    </p>\n    <p>\n      If anyone is interested in trying the chip on a MultiTrack I will refund the full price\n      including shipping if it does not work. My only demand is that you destroy the chip and send\n      me a picture of the\n      pieces to get a refund.\n    </p>\n    <p>\n      PS: The aftertouch mechanism is not scanned by the keyboard controller so if your aftertouch\n      is broken it will NOT be fixed by this chip.\n    </p>\n    <h2>Recreating the 68b01</h2>\n    <p>\n      The chip was cloned by studying the Prophet VS service manual and connecting logic probes to a\n      (partially broken) original 68b01. Monitoring the keyboard scanning cycles while listening to\n      the output on the data bus made it was possible to recreate the velocity sensitivity curve\n      accurately as well as decode the protocol used between the main MCU and the keyboard\n      controller.\n    </p>\n    <p>\n      External reset and crystal components present in the Prophet VS are not used as the Xonik\n      68b01 has everything on board.\n    </p>\n  </div>;\n};","import * as React from 'react';\nimport history from './history';\nimport { routes } from './routes';\nimport {\n  ROUTE_NORMAL,\n  ROUTE_REDIRECT\n} from './routes.type';\nimport { Routes } from './routes.type';\nimport { Redirect, Route, Router, Switch } from 'react-router';\n\nconst getRoutes = (routes: Routes) => {\n  return routes.map(route => {\n    if (route.type === ROUTE_NORMAL) {\n      const {\n        path,\n        component: Component,\n        layout: Layout,\n      } = route;\n      return (\n        <Route\n          exact\n          key={path}\n          path={path}\n          render={props =>\n            <Layout>\n              <Component {...props} />\n            </Layout>\n          }\n        />\n      );\n    } else if (route.type === ROUTE_REDIRECT) {\n      const { path, redirectPath } = route;\n      return <Redirect exact from={path} to={redirectPath} />\n    } else {\n      const allRoutesAreHandled: never = route;\n      throw new Error(allRoutesAreHandled);\n    }\n  });\n};\n\nconst RouterComponent = () => (\n  <Router history={history}>\n    <Switch>\n      <Redirect exact from=\"/index.html\" to=\"/\" />\n      {getRoutes(routes)}\n    </Switch>\n  </Router>\n);\n\nexport default RouterComponent;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport RouterComponent from './router/RouterComponent';\nimport './index.scss';\n\nReactDOM.render(\n  <RouterComponent />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/6_pin_din.1da7aecd.png\";","module.exports = __webpack_public_path__ + \"static/media/1n4148.996cf65b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resistors.e7314425.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dil-sockets.0e5705e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/transistor-voltage_reg.921c26f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/din-sockets.374ef794.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jack.fc60c5df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jacks.794481d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jack-parts.9b847914.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jack-inner.445dd578.jpg\";","module.exports = __webpack_public_path__ + \"static/media/led.cbc0590c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cap.57f22644.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ellytcaps.7a9d80a7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6n137.1a64d0b2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/microcontroller.71f5ffd7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/XM8-architecture-overview.01b2d298.png\";","module.exports = __webpack_public_path__ + \"static/media/pg-200-switches.84eb0593.png\";","module.exports = __webpack_public_path__ + \"static/media/pg-200-tx.16bc1eb4.png\";","module.exports = __webpack_public_path__ + \"static/media/nono.2340210e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yesyes.e0c291d3.jpg\";"],"sourceRoot":""}