{"version":3,"sources":["sysex/hex2sysex.js","request/request.js","config.js","settings.js","startup.js","App.js","serviceWorker.js","index.js"],"names":["OUT_CMD_ADDR","getEmptyBytes","numberOfWholeBytes","bytes","i","push","getHexStringAsByteArray","byteString","length","parseInt","substring","getAsHalfBytes","halfBytes","Array","forEach","byte","Math","floor","num","reverse","parseLines","lines","dataBlocks","mode","addressOffset","lineNum","line","_parseLine","dataLength","originalAddress","dataEnd","address","type","data","checksum","parseLine","console","log","concat","getMode","getModeString","toString","getMissingEndBytes","blockSize","mergeAndPadBlocks","blocks","_lastMerged$data","currentBlock","mergedBlocks","currentAddress","currentEndBlockNum","block","_currentBlock$data3","blockNum","getStartBlockNum","_currentBlock$data","missingBytes","apply","Object","toConsumableArray","_currentBlock$data2","getEndBlockNum","lastMerged","splitByBlockSize","splitBlocks","sliceData","slice","dataString","join","convertFileToSysex","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","fileLines","parsedBlocks","mergedProgramBlocks","splitProgramBlocks","sysexBlocks","wrap","_context","prev","next","filter","sort","b","map","abrupt","stop","this","_x","_x2","arguments","fetchAsText","_ref2","url","path","fetch","then","response","text","config","sysexAddress","xonikAddress","input","output","keepWatching","getAddress","fieldname","addressBytes","split","trim","getSettings","timeout","ms","Promise","res","setTimeout","asyncForEach","array","callback","index","parseAndUploadFile","_ref3","_callee3","delayBetweenBlocks","statusCallback","hexDataParts","sysexStart","sysexEnd","partNum","_context3","sent","_ref4","_callee2","part","percentageCompleted","_context2","write","_x4","_x3","run","_ref5","_callee4","file","settings","inputfile","_context4","t0","_x5","_x6","_x7","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","midiAccess","outputs","selectedOutput","selectedFirmware","writing","statusText","_this$state","setState","get","id","navigator","requestMIDIAccess","sysex","onstatechange","e","port","connection","_this2","updateOutputs","event","target","value","firmware","_this3","send","_this4","disableButton","react_default","createElement","className","onChange","selectOutput","key","name","selectFirmware","disabled","onClick","writeFirmware","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b080bbbf.chunk.js","sourcesContent":["// @flow\r\nexport const TYPE_DATA = 0;\r\nexport const TYPE_EOF = 1;\r\nexport const TYPE_LINEAR_ADDR = 2;\r\nexport const TYPE_EXTENDED_ADDR = 4;\r\n\r\nexport const MODE_UNKNOWN = -1;\r\nexport const MODE_PROGRAM = 0;\r\nexport const MODE_CONFIG = 1;\r\nexport const MODE_EEPROM = 2;\r\nexport const MODE_USER_ID = 3;\r\n\r\nconst EXT_ADDR_PROGRAM = '0000';\r\nconst EXT_ADDR_USER_ID = '0020';\r\nconst EXT_ADDR_CONFIG_BYTES = '0030';\r\nconst EXT_ADDR_EEPROM_BYTES = '00F0';\r\n\r\nconst OUT_CMD_ADDR = 0x10;\r\nconst OUT_CMD_DATA = 0x11;\r\nconst OUT_CMD_EOF = 0x12;\r\n\r\nconst getTypeString = (type: number) => {\r\n  switch (type) {\r\n    case TYPE_DATA:\r\n      return 'data';\r\n    case TYPE_EOF:\r\n      return 'eof';\r\n    case TYPE_LINEAR_ADDR:\r\n      return 'linear address';\r\n    case TYPE_EXTENDED_ADDR:\r\n      return 'extended address';\r\n    default:\r\n      return 'unknown';\r\n\r\n  }\r\n};\r\n\r\nconst getModeString = (mode: number) => {\r\n  switch (mode) {\r\n    case MODE_PROGRAM:\r\n      return 'program bytes';\r\n    case MODE_CONFIG:\r\n      return 'user id';\r\n    case MODE_EEPROM:\r\n      return 'config bytes';\r\n    case MODE_USER_ID:\r\n      return 'eeprom bytes';\r\n    default:\r\n      return 'unknown';\r\n\r\n  }\r\n};\r\n\r\nexport const getEmptyBytes = (numberOfWholeBytes: number) => {\r\n  const bytes = [];\r\n  for (let i = 0; i < numberOfWholeBytes; i++) {\r\n    bytes.push(255);\r\n  }\r\n  return bytes;\r\n};\r\n\r\nexport const getHexStringAsByteArray = (byteString: string) => {\r\n  const bytes = [];\r\n  for (let i = 0; i < byteString.length; i += 2) {\r\n    bytes.push(parseInt(byteString.substring(i, i + 2), 16));\r\n  }\r\n  return bytes;\r\n};\r\n\r\nexport const getAsHalfBytes = (bytes: Array<number> | number): Array<number> => {\r\n  const halfBytes = [];\r\n  if (bytes instanceof Array) {\r\n    bytes.forEach(byte => {\r\n      halfBytes.push(Math.floor(byte / 16));\r\n      halfBytes.push((byte + 16) % 16);\r\n    });\r\n    return halfBytes;\r\n  } else {\r\n    let num = bytes;\r\n    do {\r\n      halfBytes.push((num + 16) % 16);\r\n      num = num >> 4;\r\n      halfBytes.push((num + 16) % 16);\r\n      num = num >> 4;\r\n    } while (num !== 0);\r\n\r\n    return halfBytes.reverse();\r\n  }\r\n};\r\n\r\nexport const parseLine = (line: string, addressOffset: number) => {\r\n  const dataLength = parseInt(line.substring(1, 3), 16);\r\n  const originalAddress = parseInt(line.substring(3, 7), 16);\r\n  const address = addressOffset + originalAddress;\r\n  const type = parseInt(line.substring(7, 9), 16);\r\n  const dataEnd = 9 + dataLength * 2;\r\n  const data = line.substring(9, dataEnd);\r\n  const checksum = line.substring(dataEnd, dataEnd + 2);\r\n\r\n  return {\r\n    dataLength,\r\n    address,\r\n    originalAddress,\r\n    type,\r\n    data,\r\n    checksum,\r\n  };\r\n};\r\n\r\nexport const getMode = (data: string) => {\r\n  if(data === EXT_ADDR_PROGRAM){\r\n    return MODE_PROGRAM;\r\n  } else if (data === EXT_ADDR_CONFIG_BYTES) {\r\n    return MODE_CONFIG;\r\n  } else if (data === EXT_ADDR_EEPROM_BYTES) {\r\n    return MODE_EEPROM;\r\n  } else if (data === EXT_ADDR_USER_ID) {\r\n    return MODE_USER_ID;\r\n  } else {\r\n    return MODE_UNKNOWN;\r\n  }\r\n};\r\n\r\nexport const parseLines = (lines: Array<string>) => {\r\n  const dataBlocks = [];\r\n  let mode = MODE_PROGRAM;\r\n  let addressOffset = 0;\r\n  let lineNum = 1;\r\n  lines.forEach(line => {\r\n\r\n    // remove lines not containing instructions\r\n    if (line.substring(0, 1) === ':') {\r\n      const { type, address, originalAddress, data, checksum } = parseLine(line, addressOffset);\r\n\r\n      if (type === TYPE_LINEAR_ADDR) {\r\n        addressOffset = 16 * parseInt(data, 16);\r\n        console.log(`${lineNum} changed address offset to ${addressOffset} (${line})`);\r\n      } else if (type === TYPE_EXTENDED_ADDR) {\r\n        addressOffset = 65536 * parseInt(data, 16);\r\n        mode = getMode(data);\r\n        console.log(`${lineNum} changed address offset to ${addressOffset}, mode: ${getModeString(mode)} (${line})`);\r\n      } else if (type === TYPE_DATA) {\r\n        // TODO: No address offset for EEPROM ETC?\r\n        dataBlocks.push({\r\n          address,\r\n          data: getHexStringAsByteArray(data),\r\n          mode,\r\n          checksum,\r\n        });\r\n        console.log(`${lineNum}, addr: 0x${address.toString(16)} (${address}), orig: 0x${originalAddress.toString(16)}, bytes: ${data.length / 2}, data: ${data}`);\r\n      } else if(type === TYPE_EOF){\r\n        console.log(`EOF found, address: ${address}, data: ${data}, checksum: ${checksum}`);\r\n      } else {\r\n        console.log(\"Unknown type encountered: \", type, address, data, checksum);\r\n      }\r\n    } else {\r\n      console.log(\"Unknown line format encountered: \", line)\r\n    }\r\n    lineNum++;\r\n  });\r\n\r\n  console.log('Finished parsing lines');\r\n  return dataBlocks;\r\n};\r\n\r\nexport const getBlockAlignedAddress = (address: number, blockSize: number) => {\r\n  return Math.floor(address / blockSize) * blockSize;\r\n};\r\n\r\nexport const getStartBlockNum = (address: number, blockSize: number) => {\r\n  return Math.floor(address / blockSize);\r\n};\r\n\r\nexport const getEndBlockNum = (address: number, length: number, blockSize: number) => {\r\n  return Math.floor((address + length) / blockSize);\r\n};\r\n\r\nexport const getMissingEndBytes = (address: number, length: number, blockSize: number) => {\r\n  return blockSize - (blockSize + address + length) % blockSize; // adding blockSize to prevent negative number. % in js is weird.\r\n};\r\n\r\nexport const mergeAndPadBlocks = (blocks, blockSize) => {\r\n  const mergedBlocks = [];\r\n  let currentBlock;\r\n  let currentAddress = 0;\r\n  let currentEndBlockNum = -2;\r\n\r\n  blocks.forEach(block => {\r\n    const blockNum = getStartBlockNum(block.address, blockSize);\r\n\r\n    // if there is at least one full block between entries, create a new merged block.\r\n    if (blockNum !== currentEndBlockNum && blockNum !== currentEndBlockNum + 1) {\r\n      // add missing bytes from last block\r\n      if (currentBlock != null) {\r\n        const missingBytes = getMissingEndBytes(currentAddress, 0, blockSize);\r\n        if (missingBytes) {\r\n          currentBlock.data.push(...getEmptyBytes(missingBytes));\r\n        }\r\n      }\r\n\r\n      // create new block\r\n      currentAddress = blockNum * blockSize;\r\n      currentBlock = {\r\n        address: currentAddress,\r\n        data: [],\r\n      };\r\n      mergedBlocks.push(currentBlock);\r\n    }\r\n\r\n    // add missing bytes between blocks\r\n    const missingBytes = block.address - currentAddress;\r\n    if (missingBytes) {\r\n      currentBlock.data.push(...getEmptyBytes(missingBytes));\r\n    }\r\n    currentBlock.data.push(...block.data);\r\n\r\n    currentEndBlockNum = getEndBlockNum(block.address, block.data.length, blockSize);\r\n    currentAddress = block.address + block.data.length;\r\n  });\r\n\r\n  // add bytes missing from the last merged block - missing end bytes are normally added on the\r\n  // next iteration, but the last block has no next.\r\n  const lastMerged = mergedBlocks[mergedBlocks.length - 1];\r\n  const missingBytes = getMissingEndBytes(lastMerged.address, lastMerged.data.length, blockSize);\r\n  lastMerged.data.push(...getEmptyBytes(missingBytes));\r\n  return mergedBlocks;\r\n};\r\n\r\nexport const splitByBlockSize = (mergedBlocks, blockSize) => {\r\n  // split blocks to block size\r\n  const splitBlocks = [];\r\n\r\n  mergedBlocks.forEach(block => {\r\n    for (let i = 0; i < block.data.length; i += blockSize) {\r\n      const sliceData = block.data.slice(i, i + blockSize);\r\n      splitBlocks.push({\r\n        data: sliceData,\r\n        dataString: sliceData.join(),\r\n        address: block.address + i\r\n      });\r\n    }\r\n  });\r\n  return splitBlocks;\r\n};\r\n\r\nexport const convertFileToSysex = async (\r\n  fileLines: Array<string>, blockSize: number): Promise<Array<number>> => {\r\n  const parsedBlocks = parseLines(fileLines);\r\n\r\n  // Data blocks may not be ordered by address. In order to pad the blocks correctly we have to\r\n  // sort them.\r\n  const dataBlocks = parsedBlocks\r\n    .filter(block => block.mode === MODE_PROGRAM)\r\n    .sort((a, b) => a.address - b.address);\r\n\r\n  const mergedProgramBlocks = mergeAndPadBlocks(dataBlocks, blockSize);\r\n  const splitProgramBlocks = splitByBlockSize(mergedProgramBlocks, blockSize);\r\n\r\n  const sysexBlocks = splitProgramBlocks.map(block => {\r\n    return [\r\n      OUT_CMD_ADDR,\r\n      ...getAsHalfBytes(block.address),\r\n      OUT_CMD_DATA,\r\n      ...getAsHalfBytes(block.data),\r\n    ]\r\n  });\r\n  sysexBlocks.push([OUT_CMD_EOF]);\r\n  return sysexBlocks;\r\n};\r\n","export const fetchAsText = async ({url, path}: {url: ?string, path: string}): Promise<*> => {\r\n  return fetch(`${url}${path}`)\r\n    .then(response => {\r\n      return response.text();\r\n    });\r\n};\r\n","const config = {\r\n  sysexAddress: '0x00, 0x2B, 0x60',\r\n  xonikAddress: '0x22, 0x50, 0x50',\r\n  input: './input.hex',\r\n  output: './output.sysex',\r\n  keepWatching: false,\r\n};\r\n\r\nexport default config;","// @flow\r\nimport config from './config';\r\n\r\nconst getConfigValue = (name) => config[name];\r\n\r\nconst getAddress = (fieldname) => {\r\n  const address = getConfigValue(fieldname);\r\n  if (address == null) {\r\n    console.log(fieldname + ' is missing');\r\n    return null;\r\n  }\r\n\r\n  const addressBytes = address\r\n    .split(',')\r\n    .map(byte => byte.trim())\r\n    .map(byte => parseInt(byte));\r\n\r\n  if (addressBytes.length !== 3) {\r\n    console.log(\"Error: \" + fieldname + \" must be exactly 3 bytes long.\");\r\n    return null;\r\n  }\r\n  console.log(`Using ${fieldname} ${addressBytes[0]}, ${addressBytes[1]}, ${addressBytes[2]}`);\r\n  return addressBytes;\r\n\r\n};\r\n\r\nexport const getSettings = () => {\r\n\r\n  const sysexAddress = getAddress('sysexAddress');\r\n  if (sysexAddress === null) {\r\n    return null;\r\n  }\r\n\r\n  const xonikAddress = getAddress('xonikAddress');\r\n  if (xonikAddress === null) {\r\n    return null;\r\n  }\r\n\r\n  return {\r\n    sysexAddress,\r\n    xonikAddress,\r\n  }\r\n};","// @flow\r\nimport { convertFileToSysex } from \"./sysex/hex2sysex\";\r\nimport { fetchAsText } from \"./request/request\";\r\nimport { getSettings } from \"./settings\";\r\n\r\nconst timeout = ms => new Promise(res => setTimeout(res, ms));\r\n\r\nconst asyncForEach = async (array, callback) => {\r\n  for (let index = 0; index < array.length; index++) {\r\n    await callback(array[index], index, array)\r\n  }\r\n};\r\n\r\nconst parseAndUploadFile = async (\r\n  {\r\n    sysexAddress,\r\n    xonikAddress,\r\n    fileLines,\r\n    output,\r\n    delayBetweenBlocks,\r\n    statusCallback,\r\n  }\r\n) => {\r\n  const hexDataParts = await convertFileToSysex(fileLines, 64);\r\n  const sysexStart = [0xF0, ...sysexAddress, ...xonikAddress];\r\n  const sysexEnd = [0xF7];\r\n\r\n  let partNum = 1;\r\n  statusCallback('Writing');\r\n  await asyncForEach(hexDataParts, async (part) => {\r\n    console.log(\"writing part \" + partNum);\r\n    console.log(part.map(num => num.toString((16))).join(''));\r\n    if(output) output.write([...sysexStart, ...part, ...sysexEnd]);\r\n\r\n    const percentageCompleted = Math.floor(partNum * 1000 / hexDataParts.length) / 10;\r\n    statusCallback(`${percentageCompleted}% written`);\r\n    partNum++;\r\n    await timeout(delayBetweenBlocks); //150ms delay is too fast, 300 works.\r\n  });\r\n  statusCallback('Completed');\r\n  console.log('Sysex write completed');\r\n};\r\n\r\nexport const run = async (output, statusCallback, file) => {\r\n\r\n  const settings = getSettings();\r\n\r\n  try {\r\n    const inputfile = await fetchAsText({ url: '', path: 'hexfiles/' + file });\r\n    const fileLines = inputfile.split('\\n');\r\n\r\n    await parseAndUploadFile({\r\n      sysexAddress: settings.sysexAddress,\r\n      xonikAddress: settings.xonikAddress,\r\n      fileLines,\r\n      delayBetweenBlocks: 300, // 150ms delay is too fast, 300 works.\r\n      output,\r\n      statusCallback,\r\n    });\r\n  } catch (err) {\r\n    console.log('oh damn', err)\r\n    // cleanup - close midi port etc.\r\n  }\r\n\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { run } from \"./startup\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      midiAccess: null,\r\n      outputs: [],\r\n      selectedOutput: null,\r\n      selectedFirmware: null,\r\n      writing: false,\r\n      statusText: '',\r\n    }\r\n  }\r\n\r\n  updateOutputs() {\r\n\r\n    const { midiAccess, selectedOutput } = this.state;\r\n\r\n    const outputs = [];\r\n\r\n    midiAccess.outputs.forEach(output => {\r\n      outputs.push(output);\r\n    });\r\n\r\n    console.log('outputs', outputs);\r\n\r\n    this.setState({\r\n      outputs\r\n    });\r\n\r\n    if (selectedOutput) {\r\n      if (midiAccess.outputs.get(selectedOutput.id) == null) {\r\n        console.log('removing selected output');\r\n        this.setState({ selectedOutput: null });\r\n      }\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const midiAccess = await navigator.requestMIDIAccess({ sysex: true });\r\n    midiAccess.onstatechange = (e) => {\r\n      if (e.type === 'statechange' && e.port.type === 'output' && e.port.connection !== 'open') {\r\n\r\n        // connection closed or pending - pending if disconnecting after sending something,\r\n        // connection switches to open on first write.\r\n\r\n        //possible states: 'connected', 'disconnected';\r\n\r\n        console.log('Midi access changed', e);\r\n        this.updateOutputs();\r\n      }\r\n    };\r\n    this.setState({\r\n      midiAccess,\r\n    });\r\n    this.updateOutputs();\r\n  }\r\n\r\n  selectOutput(event) {\r\n    const id = event.target.value;\r\n    if (id === 'NONE') {\r\n      console.log('No output selected');\r\n      this.setState({\r\n        selectedOutput: null\r\n      });\r\n    } else {\r\n      const output = this.state.midiAccess.outputs.get(id);\r\n      if (output != null) {\r\n        console.log('Selected output', id, output);\r\n        this.setState({\r\n          selectedOutput: output,\r\n        });\r\n      } else {\r\n        console.log('Could not select output');\r\n      }\r\n    }\r\n  }\r\n\r\n  selectFirmware(event) {\r\n    const firmware = event.target.value;\r\n    if (firmware === 'NONE') {\r\n      console.log('No firmware selected');\r\n      this.setState({\r\n        selectedFirmware: null\r\n      });\r\n    } else {\r\n      this.setState({\r\n        selectedFirmware: firmware,\r\n      });\r\n\r\n    }\r\n  }\r\n\r\n  async writeFirmware() {\r\n    // TODO: Handle failures when device is unplugged while writing\r\n    if (this.state.selectedOutput === null) {\r\n      console.log('Cannot write, no output selected');\r\n      return;\r\n    }\r\n    this.setState({ writing: true });\r\n    await run({\r\n        write: (bytes) => {\r\n          this.state.selectedOutput.send(bytes);\r\n          console.log('Wrote', bytes)\r\n        }\r\n      }, (statusText) => {\r\n        this.setState({ statusText })\r\n      },\r\n      this.state.selectedFirmware\r\n    );\r\n    this.setState({ writing: false });\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const disableButton = this.state.selectedOutput === null || this.state.selectedFirmware === null || this.state.writing;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <select onChange={(event) => this.selectOutput(event)}>\r\n            <option value='NONE'>Please select a midi output</option>\r\n            {this.state.outputs.map(\r\n              output => <option key={output.id} value={output.id}>{output.name}</option>\r\n            )}\r\n          </select>\r\n          <br/>\r\n          <select onChange={(event) => this.selectFirmware(event)}>\r\n            <option value='NONE'>Then choose a firmware to upload</option>\r\n            <option value='mpg200.hex'>MPG200</option>\t\t\t \r\n          </select>\r\n          <br/>\r\n          <button disabled={disableButton} onClick={() => this.writeFirmware()}>Write firmware\r\n          </button>\r\n          <p>\r\n            <div>Status: {this.state.statusText}</div>\r\n          </p>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}